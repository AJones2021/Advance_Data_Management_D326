A.  Summarize one real-world written business report that can be created from the DVD Dataset from the “Labs on Demand Assessment Environment and DVD Database” attachment. 
My business question is, which film category brings in the most profit each month? For this question I will be looking at the profit of each category on a month-to-month basis. The summary report will show the categories and the total amount of profit each category brought that month. This information will be extracted from the detail table. 


1.  Identify the specific fields that will be included in the detailed table and the summary table of the report.
Fields used for the detailed table include: name (VARCHAR(9)), category_id (INT), title (VARCHAR(255)), film_id (INT), inventory_film_id (INT), inventory_id (INT), customer_id (INT), amount (numeric(5,2)), payment_date (VARCHAR(25))
Fields used for the summary table include: name (VARCHAR(25)), month (VARCHAR(9)), payment_total (INT) 


2.  Describe the types of data fields used for the report.
Data types used in the report include VARCHAR, INT and numeric. 


3.  Identify at least two specific tables from the given dataset that will provide the data necessary for the detailed table section and the summary table section of the report.
The detail table will pull data from the category, film_category, film, inventory, rental and payment tables. 
	The summary table will pull from the detail table. 


4.  Identify at least one field in the detailed table section that will require a custom transformation with a user-defined function and explain why it should be transformed (e.g., you might translate a field with a value of N to No and Y to Yes).
The payment_date field will transform the payment_date from a TIMESTAMP to VARCHAR(9) and display the month on the table. This will make it simple to read and compare the months and the profits each category brought in, in those months. 


5.  Explain the different business uses of the detailed table section and the summary table section of the report. 
 The detail table section shows the profit from each film and includes information such as which month it was rented, the category of the film, cost to rent and its id.  This can be useful information if the business wants to add or delete films rented and look at the information in more detail. 
The summary detail can help a business understand what categories they should have available to rent in order to make the most profit. For example, in October they might have made the most profit in the horror film category, this might be because of Halloween. This tells the business they should have more horror films available to rent in the month of October to maximize profit. 

6.  Explain how frequently your report should be refreshed to remain relevant to stakeholders.
I believe the report should be refreshed monthly in order to compare profits on a monthly basis. 

 
B.  Provide original code for function(s) in text format that perform the transformation(s) you identified in part A4.
 
CREATE OR REPLACE FUNCTION time_of_month (payment_date TIMESTAMP)
	RETURNS VARCHAR(9)
	LANGUAGE plpgsql
	AS
	$$
	DECLARE month_of_payment VARCHAR(9);
	BEGIN
		SELECT EXTRACT (MONTH FROM payment_date) INTO month_of_payment;
		RETURN month_of_payment;
	END;
	$$



C.  Provide original SQL code in a text format that creates the detailed and summary tables to hold your report table sections.
 
CREATE TABLE film_category_details (
name VARCHAR (25), 
category_id INT, 
title VARCHAR (255),
film_id INT, 
inventory_film_id INT,
inventory_id INT, 
customer_id INT, 
amount numeric(5,2), 
payment_date VARCHAR(25) 
);
CREATE TABLE category_summary (
	name VARCHAR (25),
	month VARCHAR (9),
	payment_total INT
);


D.  Provide an original SQL query in a text format that will extract the raw data needed for the detailed section of your report from the source database.

INSERT INTO film_category_details
SELECT c.name, fc.category_id, f.title, f.film_id, i.film_id, r.inventory_id, p.customer_id, p.amount, time_of_month(p.payment_date)
FROM category AS c
INNER JOIN film_category AS fc
ON c.category_id = fc.category_id
INNER JOIN film AS f
ON fc.film_id = f.film_id
INNER JOIN inventory AS i
ON f.film_id = i.film_id
INNER JOIN rental AS r
ON i.inventory_id = r.inventory_id
INNER JOIN payment AS p
ON r.customer_id = p.customer_id
WHERE p.payment_date BETWEEN '2007-02-15 00:00:00.000000' AND '2007-05-14 23:59:59.999999'
GROUP BY p.payment_date, c.name, p.customer_id, fc.category_id, f.title, i.film_id, f.film_id, p.amount, r.inventory_id
ORDER BY p.payment_date  DESC;


E.  Provide original SQL code in a text format that creates a trigger on the detailed table of the report that will continually update the summary table as data is added to the detailed table.
 
CREATE OR REPLACE FUNCTION trigger_update()
RETURNS TRIGGER
LANGUAGE plpggsql
AS 
$$
BEGIN
	DELETE FROM category_summary;
	INSERT INTO category_summary
	SELECT name, payment_date, SUM(amount)
	FROM film_category_details
	GROUP BY payment_date, name
	ORDER BY payment_date, name;
	RETURN NEW;
END;
$$

CREATE TRIGGER update_summary
AFTER INSERT
ON film_category_details
FOR EACH STATEMENT
EXECUTE PROCEDURE trigger_update();


F.  Provide an original stored procedure in a text format that can be used to refresh the data in both the detailed table and summary table. The procedure should clear the contents of the detailed table and summary table and perform the raw data extraction from part D.

CREATE OR REPLACE PROCEDURE refresh_tables()
LANGUAGE plpgsql
AS 
$$
BEGIN
	DELETE FROM film_category_details;
	INSERT INTO film_category_details
SELECT c.name, fc.category_id, f.title, f.film_id, i.film_id, r.inventory_id, p.customer_id, p.amount, time_of_month(p.payment_date)
FROM category AS c
INNER JOIN film_category AS fc
ON c.category_id = fc.category_id
INNER JOIN film AS f
ON fc.film_id = f.film_id
INNER JOIN inventory AS i
ON f.film_id = i.film_id
INNER JOIN rental AS r
ON i.inventory_id = r.inventory_id
INNER JOIN payment AS p
ON r.customer_id = p.customer_id
WHERE p.payment_date BETWEEN '2007-02-15 00:00:00.000000' AND '2007-05-14 23:59:59.999999'
GROUP BY p.payment_date, c.name, p.customer_id, fc.category_id, f.title, i.film_id, f.film_id, p.amount, r.inventory_id
ORDER BY p.payment_date  DESC;
RETURN;
END;
$$

CALL refresh_tables();
SELECT * FROM film_category_details;
SELECT * FROM category_summary;


1.	Identify a relevant job scheduling tool that can be used to automate the stored procedure.
 
The tool I would have my job install is the pgAgent tool that was used for this lab. I would want the data refreshed and updated on the last day of every month. This way the profit made during that entire month can be on display on the summary table. 


G.  Provide a Panopto video recording that includes the presenter and a vocalized demonstration of the functionality of the code used for the analysis.

    https://wgu.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=e68e6dbd-ac43-459e-bb21-b1d900d2d6c3

 
H.  Acknowledge all utilized sources, including any sources of third-party code, using in-text citations and references. If no sources are used, clearly declare that no sources were used to support your submission.
 
    No sources were used to support my submission.



